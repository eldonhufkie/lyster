@*
    Reusable form input component with labels, validation, and error states
    Usage:
    <FormInput
        Label="Email"
        Type="email"
        Placeholder="your@email.com"
        @bind-Value="email"
        Error="@errorMessage"
        Required="true" />
*@

<div class="space-y-2 w-full">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id" class="block text-sm font-medium @LabelClass">
            @Label
            @if (Required)
            {
                <span class="text-danger ml-1" aria-label="required">*</span>
            }
        </label>
    }

    <div class="relative">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span class="text-text-tertiary">
                    @((MarkupString)Icon)
                </span>
            </div>
        }

        <input
            id="@Id"
            type="@Type"
            value="@Value"
            placeholder="@Placeholder"
            disabled="@Disabled"
            required="@Required"
            aria-invalid="@(!string.IsNullOrEmpty(Error))"
            aria-describedby="@(HasError ? $"{Id}-error" : null)"
            @oninput="HandleInput"
            @onblur="HandleBlur"
            class="@InputClasses"
        />

        @if (HasError && ShowErrorIcon)
        {
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-danger" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                </svg>
            </div>
        }

        @if (HasSuccess && ShowSuccessIcon)
        {
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-success" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
            </div>
        }
    </div>

    @if (HasError)
    {
        <p id="@($"{Id}-error")" class="text-sm text-danger mt-1 flex items-start gap-1">
            <svg class="h-4 w-4 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
            </svg>
            <span>@Error</span>
        </p>
    }

    @if (!string.IsNullOrEmpty(HelperText) && !HasError)
    {
        <p class="text-sm text-text-tertiary mt-1">@HelperText</p>
    }
</div>

@code {
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? Error { get; set; }
    [Parameter] public string? HelperText { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ShowErrorIcon { get; set; } = true;
    [Parameter] public bool ShowSuccessIcon { get; set; } = false;
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? AdditionalClasses { get; set; }

    private bool HasError => !string.IsNullOrEmpty(Error);
    private bool HasSuccess => ShowSuccessIcon && !HasError && !string.IsNullOrEmpty(Value);
    private bool HasIcon => !string.IsNullOrEmpty(Icon);

    private string InputId => Id ?? $"input-{Guid.NewGuid().ToString("N")[..8]}";

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Id))
        {
            Id = InputId;
        }
    }

    private string LabelClass => HasError
        ? "text-danger"
        : "text-text-secondary";

    private string InputClasses
    {
        get
        {
            var baseClasses = "w-full px-4 py-3 rounded-lg transition-all duration-base";
            var bgClasses = Disabled
                ? "bg-bg-700 cursor-not-allowed"
                : "bg-surface/50 hover:bg-surface";
            var borderClasses = HasError
                ? "border-2 border-danger focus:border-danger focus:ring-danger/30"
                : "border border-border-muted focus:border-accent focus:ring-accent/30";
            var textClasses = Disabled
                ? "text-text-tertiary"
                : "text-text-primary placeholder-text-tertiary";
            var focusClasses = "focus:outline-none focus:ring-2";
            var paddingClasses = HasIcon ? "pl-10" : "";
            var iconPaddingClasses = (HasError && ShowErrorIcon) || HasSuccess ? "pr-10" : "";

            return $"{baseClasses} {bgClasses} {borderClasses} {textClasses} {focusClasses} {paddingClasses} {iconPaddingClasses} {AdditionalClasses}".Trim();
        }
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? string.Empty;
        await ValueChanged.InvokeAsync(newValue);
    }

    private void HandleBlur()
    {
        // Can add validation logic here if needed
    }
}
