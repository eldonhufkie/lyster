@*
    Reusable component for displaying album art, avatars, or placeholder images
    Usage:
    <AvatarOrCover
        Src="/assets/album-art.jpg"
        Alt="Album Title"
        Size="lg"
        Shape="square"
        ShowPlayOverlay="true" />
*@

<div class="@ContainerClasses" @onclick="HandleClick">
    <div class="relative w-full h-full group">
        @if (!string.IsNullOrEmpty(Src))
        {
            <img
                src="@Src"
                alt="@Alt"
                class="@ImageClasses"
                loading="lazy"
            />
        }
        else
        {
            <!-- Placeholder with gradient or initials -->
            <div class="@PlaceholderClasses">
                @if (!string.IsNullOrEmpty(Fallback))
                {
                    <span class="@FallbackTextClasses">@Fallback</span>
                }
                else
                {
                    <svg class="@IconClasses" fill="currentColor" viewBox="0 0 24 24">
                        @if (Type == "avatar")
                        {
                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                        }
                        else
                        {
                            <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z"/>
                        }
                    </svg>
                }
            </div>
        }

        <!-- Play overlay for album covers -->
        @if (ShowPlayOverlay)
        {
            <div class="@OverlayClasses">
                <button
                    type="button"
                    class="@PlayButtonClasses"
                    aria-label="@(IsPlaying ? "Pause" : "Play")"
                    @onclick:stopPropagation="true"
                    @onclick="HandlePlayClick">
                    @if (IsPlaying)
                    {
                        <!-- Pause icon -->
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>
                        </svg>
                    }
                    else
                    {
                        <!-- Play icon -->
                        <svg class="w-6 h-6 ml-0.5" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M8 5v14l11-7z"/>
                        </svg>
                    }
                </button>
            </div>
        }

        <!-- Border ring for playing state -->
        @if (IsPlaying)
        {
            <div class="absolute inset-0 @ShapeClasses border-2 border-accent playing-pulse pointer-events-none"></div>
        }
    </div>
</div>

@code {
    [Parameter] public string? Src { get; set; }
    [Parameter] public string Alt { get; set; } = "Image";
    [Parameter] public string Size { get; set; } = "md"; // xs, sm, md, lg, xl, 2xl, full
    [Parameter] public string Shape { get; set; } = "square"; // square, rounded, circle
    [Parameter] public string Type { get; set; } = "album"; // album, avatar, playlist
    [Parameter] public bool ShowPlayOverlay { get; set; }
    [Parameter] public bool IsPlaying { get; set; }
    [Parameter] public string? Fallback { get; set; } // Initials or text
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public EventCallback OnPlayClick { get; set; }
    [Parameter] public string? AdditionalClasses { get; set; }

    private string SizeClasses => Size switch
    {
        "xs" => "w-8 h-8",
        "sm" => "w-12 h-12",
        "md" => "w-16 h-16",
        "lg" => "w-24 h-24",
        "xl" => "w-32 h-32",
        "2xl" => "w-48 h-48",
        "full" => "w-full aspect-square",
        _ => "w-16 h-16"
    };

    private string ShapeClasses => Shape switch
    {
        "rounded" => "rounded-lg",
        "circle" => "rounded-full",
        _ => "rounded-md"
    };

    private string ContainerClasses => $"{SizeClasses} {AdditionalClasses} {(OnClick.HasDelegate ? "cursor-pointer" : "")}".Trim();

    private string ImageClasses => $"w-full h-full object-cover {ShapeClasses}";

    private string PlaceholderClasses => $"w-full h-full bg-gradient-to-br from-accent/20 to-accent-2/20 flex items-center justify-center {ShapeClasses}";

    private string FallbackTextClasses => Size switch
    {
        "xs" => "text-xs font-medium text-text-primary",
        "sm" => "text-sm font-medium text-text-primary",
        "md" => "text-base font-semibold text-text-primary",
        "lg" => "text-xl font-semibold text-text-primary",
        "xl" => "text-2xl font-bold text-text-primary",
        "2xl" => "text-4xl font-bold text-text-primary",
        _ => "text-base font-semibold text-text-primary"
    };

    private string IconClasses => Size switch
    {
        "xs" => "w-4 h-4 text-text-tertiary",
        "sm" => "w-6 h-6 text-text-tertiary",
        "md" => "w-8 h-8 text-text-tertiary",
        "lg" => "w-12 h-12 text-text-tertiary",
        "xl" => "w-16 h-16 text-text-tertiary",
        "2xl" => "w-24 h-24 text-text-tertiary",
        _ => "w-8 h-8 text-text-tertiary"
    };

    private string OverlayClasses =>
        "absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-base flex items-center justify-center " + ShapeClasses;

    private string PlayButtonClasses =>
        "w-12 h-12 rounded-full bg-accent hover:bg-accent-hover hover:scale-110 transition-all duration-base flex items-center justify-center text-white shadow-lg focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 focus:ring-offset-black/40";

    private async Task HandleClick()
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }

    private async Task HandlePlayClick()
    {
        if (OnPlayClick.HasDelegate)
        {
            await OnPlayClick.InvokeAsync();
        }
    }
}
