@page "/register"
@using Lyster.App.Components.Shared
@layout Lyster.App.Components.Layout.AuthLayout

<div class="space-y-8 fade-in">
    <!-- Header -->
    <div class="space-y-2">
        <h2 class="text-3xl font-bold text-text-primary">Create your account</h2>
        <p class="text-text-secondary">Start your musical journey with Tidal</p>
    </div>

    <!-- Registration Form -->
    <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true" class="space-y-6">
        <!-- Name input -->
        <FormInput
            Label="Full name"
            Type="text"
            @bind-Value="fullName"
            Placeholder="John Doe"
            Required="true"
            Error="@nameError"
            Icon="@PersonIcon"
        />

        <!-- Email input -->
        <FormInput
            Label="Email address"
            Type="email"
            @bind-Value="email"
            Placeholder="your@email.com"
            Required="true"
            Error="@emailError"
            Icon="@EmailIcon"
        />

        <!-- Password input -->
        <FormInput
            Label="Password"
            Type="password"
            @bind-Value="password"
            Placeholder="••••••••"
            Required="true"
            Error="@passwordError"
            Icon="@LockIcon"
            HelperText="Must be at least 8 characters with uppercase, lowercase, and a number"
        />

        <!-- Confirm Password input -->
        <FormInput
            Label="Confirm password"
            Type="password"
            @bind-Value="confirmPassword"
            Placeholder="••••••••"
            Required="true"
            Error="@confirmPasswordError"
            Icon="@LockIcon"
        />

        <!-- Terms acceptance -->
        <div class="space-y-4">
            <label class="flex items-start gap-3 cursor-pointer group">
                <input
                    type="checkbox"
                    @bind="acceptTerms"
                    class="w-4 h-4 mt-1 rounded border-border-muted bg-surface text-accent focus:ring-accent focus:ring-2 focus:ring-offset-0 transition-colors cursor-pointer"
                />
                <span class="text-sm text-text-secondary group-hover:text-text-primary transition-colors flex-1">
                    I agree to the
                    <a href="/terms" class="text-accent hover:text-accent-hover underline">Terms of Service</a>
                    and
                    <a href="/privacy" class="text-accent hover:text-accent-hover underline">Privacy Policy</a>
                </span>
            </label>

            @if (!string.IsNullOrEmpty(termsError))
            {
                <p class="text-sm text-danger">@termsError</p>
            }
        </div>

        <!-- Marketing emails option -->
        <label class="flex items-start gap-3 cursor-pointer group">
            <input
                type="checkbox"
                @bind="subscribeToMarketing"
                class="w-4 h-4 mt-1 rounded border-border-muted bg-surface text-accent focus:ring-accent focus:ring-2 focus:ring-offset-0 transition-colors cursor-pointer"
            />
            <span class="text-sm text-text-secondary group-hover:text-text-primary transition-colors flex-1">
                Send me emails about new releases, exclusive content, and special offers
            </span>
        </label>

        <!-- Form error message -->
        @if (!string.IsNullOrEmpty(formError))
        {
            <div class="p-4 rounded-lg bg-danger-bg border border-danger/30 flex items-start gap-3">
                <svg class="w-5 h-5 text-danger flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                </svg>
                <div class="flex-1">
                    <h4 class="text-sm font-medium text-danger mb-1">Registration failed</h4>
                    <p class="text-sm text-danger/90">@formError</p>
                </div>
            </div>
        }

        <!-- Submit button -->
        <PrimaryButton
            Type="submit"
            FullWidth="true"
            Loading="@isLoading"
            Disabled="@isLoading">
            @(isLoading ? "Creating account..." : "Create account")
        </PrimaryButton>

        <!-- Divider -->
        <div class="relative">
            <div class="absolute inset-0 flex items-center">
                <div class="w-full border-t border-border-muted"></div>
            </div>
            <div class="relative flex justify-center text-sm">
                <span class="px-4 bg-bg-900 text-text-tertiary">Or sign up with</span>
            </div>
        </div>

        <!-- Social signup buttons -->
        <div class="grid grid-cols-2 gap-4">
            <GhostButton
                Variant="bordered"
                OnClick="HandleGoogleSignup"
                Icon="@GoogleIcon">
                Google
            </GhostButton>

            <GhostButton
                Variant="bordered"
                OnClick="HandleGithubSignup"
                Icon="@GithubIcon">
                GitHub
            </GhostButton>
        </div>
    </form>

    <!-- Sign in link -->
    <div class="text-center pt-4 border-t border-border-muted">
        <p class="text-sm text-text-secondary">
            Already have an account?
            <a href="/login" class="text-accent hover:text-accent-hover font-semibold transition-colors ml-1">
                Sign in
            </a>
        </p>
    </div>
</div>

@code {
    private string fullName = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private bool acceptTerms = false;
    private bool subscribeToMarketing = false;
    private bool isLoading = false;

    private string? nameError;
    private string? emailError;
    private string? passwordError;
    private string? confirmPasswordError;
    private string? termsError;
    private string? formError;

    // Icons as SVG markup
    private string PersonIcon = @"
        <svg class=""w-5 h-5"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"">
            <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z""/>
        </svg>";

    private string EmailIcon = @"
        <svg class=""w-5 h-5"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"">
            <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z""/>
        </svg>";

    private string LockIcon = @"
        <svg class=""w-5 h-5"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"">
            <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z""/>
        </svg>";

    private string GoogleIcon = @"
        <svg class=""w-5 h-5"" viewBox=""0 0 24 24"" fill=""currentColor"">
            <path d=""M12.24 10.285V14.4h6.806c-.275 1.765-2.056 5.174-6.806 5.174-4.095 0-7.439-3.389-7.439-7.574s3.345-7.574 7.439-7.574c2.33 0 3.891.989 4.785 1.849l3.254-3.138C18.189 1.186 15.479 0 12.24 0c-6.635 0-12 5.365-12 12s5.365 12 12 12c6.926 0 11.52-4.869 11.52-11.726 0-.788-.085-1.39-.189-1.989H12.24z""/>
        </svg>";

    private string GithubIcon = @"
        <svg class=""w-5 h-5"" viewBox=""0 0 24 24"" fill=""currentColor"">
            <path d=""M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z""/>
        </svg>";

    private async Task HandleSubmit()
    {
        // Reset errors
        nameError = null;
        emailError = null;
        passwordError = null;
        confirmPasswordError = null;
        termsError = null;
        formError = null;

        // Validate (UI-only validation for Phase 1)
        var hasError = false;

        if (string.IsNullOrWhiteSpace(fullName))
        {
            nameError = "Full name is required";
            hasError = true;
        }
        else if (fullName.Length < 2)
        {
            nameError = "Name must be at least 2 characters";
            hasError = true;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "Email is required";
            hasError = true;
        }
        else if (!email.Contains("@") || !email.Contains("."))
        {
            emailError = "Please enter a valid email address";
            hasError = true;
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            passwordError = "Password is required";
            hasError = true;
        }
        else if (password.Length < 8)
        {
            passwordError = "Password must be at least 8 characters";
            hasError = true;
        }
        else if (!System.Text.RegularExpressions.Regex.IsMatch(password, @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$"))
        {
            passwordError = "Password must contain uppercase, lowercase, and a number";
            hasError = true;
        }

        if (string.IsNullOrWhiteSpace(confirmPassword))
        {
            confirmPasswordError = "Please confirm your password";
            hasError = true;
        }
        else if (password != confirmPassword)
        {
            confirmPasswordError = "Passwords do not match";
            hasError = true;
        }

        if (!acceptTerms)
        {
            termsError = "You must accept the terms and privacy policy";
            hasError = true;
        }

        if (hasError) return;

        // Simulate registration (Phase 1 - no actual service)
        isLoading = true;
        await Task.Delay(2000); // Simulate API call

        // Mock successful registration
        Console.WriteLine($"Registration successful for: {fullName} ({email})");
        Console.WriteLine($"Marketing subscription: {subscribeToMarketing}");
        // TODO: Navigate to /songs or show welcome screen

        isLoading = false;
    }

    private void HandleGoogleSignup()
    {
        Console.WriteLine("Google signup clicked (UI-only)");
        // TODO: Implement OAuth flow in Phase 2
    }

    private void HandleGithubSignup()
    {
        Console.WriteLine("GitHub signup clicked (UI-only)");
        // TODO: Implement OAuth flow in Phase 2
    }
}
